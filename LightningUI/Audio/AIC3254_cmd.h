#pragma once
#include "../Config/customer.h"
static const BYTE cmd_3D_effect_ini[]={
	0x01,	0x10,
	0x00,0x00,		
	0x01,0x01,		
	0x00,0x00,	
	0x04,0x03,0x05,0x91,0x06,0x08,		
	0x0B,0x82,0x0c,0x88,		
	0x00,0x01,		
	0x02,0xA9,		
	0x01,0x08,		
	0x02,0xA1,		
	0x47,0x32,		
	0x7B,0x01,		
	0x00,0x00,		
	0x3C,0x19,		
	0x00,0x2C,0x01,0x04,		
	0x00,0x01,		
	0xAA,0xAA,0xAA,0xAA,

	0x01,	0x00,
	0x14,0x35,		
	0x0C,0x08,0x0d,0x08,		
	0x0E,0x08,0x0f,0x08,		
	0x09,0x3C,		
	0x10,0x00,0x11,0x00,		
	0x12,0x00,0x13,0x00,		
	0x00,0x00,		
	0x41,0x00,0x42,0x00,		
	0x3F,0xD6,		
	0x40,0x00,		
	0x00,0x2D,		
	0x10,0x76,0x11,0x0E,0x12,0xE9,0x13,0x00,		
	0x00,0x2C,0x01,0x05,		
	//f,0x30,0x01,0xxxxxx1x0,		0xAA,0xAA,0xAA,0xAA,
	0x00,0x2D,		
	0x10,0x76,0x11,0x0E,0x12,0xE9,0x13,0x00,		
	0xAA,0xAA,0xAA,0xAA,
};

/*
static const BYTE cmd_Adaptive_filter_ini[]={
	0x00,0x00,		0xAA,0xAA,0xAA,0xAA,
	0x01,0x01,		0xAA,0xAA,0xAA,0xAA,
	0x00,0x00,		0xAA,0xAA,0xAA,0xAA,
	0x04,0x03,0x91,0x08,		0xAA,0xAA,0xAA,0xAA,
	0x0B,0x82,0x88,		0xAA,0xAA,0xAA,0xAA,

	0x12,0x82,0x88,		0xAA,0xAA,0xAA,0xAA,

	0x00,0x01,		0xAA,0xAA,0xAA,0xAA,

	0x02,0xA9,		0xAA,0xAA,0xAA,0xAA,

	0x01,0x08,		0xAA,0xAA,0xAA,0xAA,

	0x02,0xA1,		0xAA,0xAA,0xAA,0xAA,
	0x0A,0x00,		0xAA,0xAA,0xAA,0xAA,

	0x47,0x32,		0xAA,0xAA,0xAA,0xAA,

// 	0x7B,0x01,		0xAA,0xAA,0xAA,0xAA,
	0x7B,0x07,		0xAA,0xAA,0xAA,0xAA,

	0x00,0x00,		0xAA,0xAA,0xAA,0xAA,
	0x3C,0x02,		0xAA,0xAA,0xAA,0xAA,
	0x3D,0x02,		0xAA,0xAA,0xAA,0xAA,

	0x24,0xCC,		0xAA,0xAA,0xAA,0xAA,

	0x00,0x2C,0x04,		0xAA,0xAA,0xAA,0xAA,
	0x00,0x2C,		0xAA,0xAA,0xAA,0xAA,
	0x0C,0x00,0x00,0x00,0x00,0x0A,0xBE,0x8D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,		0xAA,0xAA,0xAA,0xAA,
	0x00,0x2D,		0xAA,0xAA,0xAA,0xAA,
	0x14,0x00,0x00,0x00,0x00,0x0A,0xBE,0x8D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,		0xAA,0xAA,0xAA,0xAA,
	0x00,0x3E,		0xAA,0xAA,0xAA,0xAA,
	0x0C,0x00,0x00,0x00,0x00,0x0A,0xBE,0x8D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,		0xAA,0xAA,0xAA,0xAA,
	0x00,0x3F,		0xAA,0xAA,0xAA,0xAA,
	0x14,0x00,0x00,0x00,0x00,0x0A,0xBE,0x8D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,		0xAA,0xAA,0xAA,0xAA,

// 	0x00,0x08,0x04,		0xAA,0xAA,0xAA,0xAA,
// 	0x00,0x08,		0xAA,0xAA,0xAA,0xAA,
// 	0x0C,0x00,0x00,0x00,0x00,0x0A,0xBE,0x8D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,		0xAA,0xAA,0xAA,0xAA,
// 	0x00,0x09,		0xAA,0xAA,0xAA,0xAA,
// 	0x14,0x00,0x00,0x00,0x00,0x0A,0xBE,0x8D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,		0xAA,0xAA,0xAA,0xAA,
// 	0x00,0x0A,		0xAA,0xAA,0xAA,0xAA,
// 	0x0C,0x00,0x00,0x00,0x00,0x0A,0xBE,0x8D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,		0xAA,0xAA,0xAA,0xAA,
// 	0x00,0x0B,		0xAA,0xAA,0xAA,0xAA,
// 	0x14,0x00,0x00,0x00,0x00,0x0A,0xBE,0x8D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,		0xAA,0xAA,0xAA,0xAA,

	0x00,0x01,		0xAA,0xAA,0xAA,0xAA,
// 	0x14,0x35,		0xAA,0xAA,0xAA,0xAA,
	0x14,0xFD,		0xAA,0xAA,0xAA,0xAA,

// 	0x36, 0x40,	0xAA,0xAA,0xAA,0xAA,
// 	0x39, 0x40,	0xAA,0xAA,0xAA,0xAA,

	0x0C,0x08,0x08,		0xAA,0xAA,0xAA,0xAA,
	0x0E,0x08,0x08,		0xAA,0xAA,0xAA,0xAA,

	0x09,0x3F,		0xAA,0xAA,0xAA,0xAA,
	0x10,0x00,0x00,		0xAA,0xAA,0xAA,0xAA,
	0x12,0x00,0x00,		0xAA,0xAA,0xAA,0xAA,

// 	0x3b, 0x0c,	0xAA,0xAA,0xAA,0xAA,
// 	0x3c, 0x0c,	0xAA,0xAA,0xAA,0xAA,

	0x00,0x00,		0xAA,0xAA,0xAA,0xAA,
	0x41,0x00,0x00,		0xAA,0xAA,0xAA,0xAA,
	0x3F,0xD6,		0xAA,0xAA,0xAA,0xAA,
	0x40,0x00,		0xAA,0xAA,0xAA,0xAA,
	0x51,0xc0,		0xAA,0xAA,0xAA,0xAA,
	0x52,0x00,		0xAA,0xAA,0xAA,0xAA,
	//0x1D,0x10,		0xAA,0xAA,0xAA,0xAA,

// 	0x10,0x00,0x00,		0xAA,0xAA,0xAA,0xAA,
// 	0x12,0x00,0x00,		0xAA,0xAA,0xAA,0xAA,
// 	0x09,0x3F,		0xAA,0xAA,0xAA,0xAA,
// 	0x10,0x00,0x00,		0xAA,0xAA,0xAA,0xAA,
// 	0x12,0x00,0x00,		0xAA,0xAA,0xAA,0xAA,

};
*/

static const BYTE cmd_Adaptive_filter_ini2[]={
	//begin a section////////////////////////////////
	0x1,		0x10,
	0x00,0x00,		
	0x01,0x01,  
	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////

	//begin a section////////////////////////////////
	0x1,		0x00,
	0x00,0x01,
	0x01,0x80,
	0x02,0x00,

	0x47,0x32,
	0x7b,0x01,

	0x00,0x08, //page 8

	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////


	//begin a section////////////////////////////////
	0x0,		0x00,
	0x08, 0xff, 0xff, 0xff, 0x00,
	0x80,0x00,0x00,0x00,
	0xff, 0xff, 0xff, 0x00,
	0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,
	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////

	//begin a section////////////////////////////////
	0x1,		0x00,
	0x00,0x1a, //page 26
	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////

	//begin a section////////////////////////////////
	0x0,		0x00,
	0x08, 0xff, 0xff, 0xff, 0x00,
	0x80,0x00,0x00,0x00,
	0xff, 0xff, 0xff, 0x00,
	0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,
	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////

	//begin a section////////////////////////////////
	0x1,		0x00,
	0x00,0x50, //page 80
	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////

	//begin a section////////////////////////////////
	0x0,		0x00,
	0x08, 0x88, 0x03, 0xff, 0x00,
	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////

	//begin a section////////////////////////////////
	0x1,		0x00,
	0x00,0x2c, //page 44
	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////

	//begin a section////////////////////////////////
	0x0,		0x00,
	0x08, 0xff, 0xff, 0xff, 0x00,
	0x80,0x00,0x00,0x00,
	0xff, 0xff, 0xff, 0x00,
	0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,
	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////

	//begin a section////////////////////////////////
	0x1,		0x00,
	0x00,0x3e, //page 62
	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////

	//begin a section////////////////////////////////
	0x0,		0x00,
	0x08, 0xff, 0xff, 0xff, 0x00,
	0x80,0x00,0x00,0x00,
	0xff, 0xff, 0xff, 0x00,
	0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,
	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////

	//begin a section////////////////////////////////
	0x1,		0x00,
	0x00,0x98, //page 152
	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////

	//begin a section////////////////////////////////
	0x0,		0x00,
	0x08, 0x88, 0x03, 0xff, 0x00,
	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////

	//begin a section////////////////////////////////
	0x01,	0x00,
	0x00,0x00, //page 0
	0x3c,/*0x00*/0x19,
	0x3d,/*0x00*/0x02,
	0x11,0x02,
	0x17,0x01,
	0x0f,0x01,
	0x10,0x00,
	0x15,0x01,
	0x16,0x00,

	0x00,0x08,//page 8
	0x01,0x04,
	0x00,0x2c,//page 44
	0x01,0x04,

	0x00,0x00,//page 0
	0x05,0x91,
	0x06,0x08,
	0x07,0x00,
	0x08,0x00,

	0x04,0x03,
	0x0c,0x88,
	0x0d,0x00,
	0x0f,0x80,

	0x12,0x02,
	0x13,0x88,
	0x14,0x80,

	0x0b,0x82,
	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////

	//begin a section////////////////////////////////
	0x01,	0x00,
	0x00,0x01,
	0x33,0x40,
	0x34,0x40,
	0x36,0x40,
	0x37,0x40,
	0x39,0x40,

	0x3b,0x00,
	0x3c,0x00,

	0x00,0x00,//page 0
	0x51,0xc0,
	0x52,0x00,

	0x00,0x01,//page 1
	0x14,0x25,
	0x0c,0x08,
	0x0d,0x08,
	0x0e,0x08,
	0x0f,0x08,

	0x00,0x00,//page 0
	0x3f,0xd4,

	0x00,0x01,//page 1
	0x10,0x00,
	0x11,0x00,
	0x12,0x00,
	0x13,0x00,

	0x09,0x3c,

	0x00,0x00,//page 0
	0x40,0x00,

	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////
};

static const BYTE cmd_Adaptive_filter_ini[]={
	//begin a section////////////////////////////////
	0x1,	0x02,//delay 2*10ms
	0x00,0x00,		
	0x01,0x01,  
	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////

	//begin a section////////////////////////////////
	0x1,	0x05,//delay 5*10ms

	0x00,0x00,

	//High PLL Clock Range
	0x04,0x03/*0x43*/,

#if (CVTE_DEF_AUDIO_CODEC_SAMPLERATE_44100 == 1)
	//For 44.1K: //5.6448
	//MCLK = 16M, PLLP=1,PLLR=1,PLLJ=5, PLLD=6448
	//MADC=2,NADC=2,AOSR=512,
	//MDAC=2,NDAC=2,DOSR=128
	0x05,0x91,//PLL-P
	0x06,0x05,//PLL-J
	0x07,0x19,//PLL-D-high
	0x08,0x30,//PLL-D-low
#else
	//For 48K:
	//MCLK = 16M, PLLP=1,PLLR=1,PLLJ=6, PLLD=1440
	//MADC=2,NADC=2,AOSR=512,
	//MDAC=2,NDAC=2,DOSR=128
	0x05,0x91,//PLL-P
	0x06,0x06,//PLL-J
	0x07,0x05,//PLL-D-high
	0x08,/*0xA0*/0xA3,//PLL-D-low
#endif

	//NDAC=2
	0x0B,0x01,
	0x0B,0x82,
	//MDAC=2
	0x0C,0x04,
	0x0C,0x82,
	//DOSR=512
	0x0D,0x02,
	0x0E,0x00,
	//NADC=2
	0x12,0x01,
	0x12,0x82,
	//MADC=8
	0x13,0x04,
	0x13,0x88,
	//AOSR=128
	0x14,0x80,

	//BCLK,MCLK output,word length 32bit
	0x1b,0x3c/*0x0c*/,
	//BCLK N Divider=16//32//
	0x1e,/*0xa0*/0x90,
	//0x1d,0x84,
	//data offset:
	0x1c,0x00,

	// 	0x3D,0x01,
	// 	0x3C, 0x08,
	0x3D,/*0x00*/0x02,
	0x3C,/*0x19*/0x19,

	//power on ADC
	0x24,/*0xCC*/0x88,
	//power on DAC
	0x25,0x88,

	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////

	//begin a section////////////////////////////////
	0x01,	0x00,

	0x00,0x01,	
	// 	0x01,0x08,
	// 	0x02,0x00,

	0x02,0xA9/*0x09*/,
	0x01,0x08,	
	0x02,0xA1/*0x01*/,

	0x0A,0x00/*0x03*/,

	0x3D,0x00, //PTM_R1
	0x47,0x32,	
	0x7B,0x01,	
	0x34,/*0x10*/0x00,
	0x36,0x40,
	0x37,/*0x10*/0x00,
	0x39,0x40,
	0x3A,0x00,

	0x3b,0x00,
	0x3c,0x00,

	0x00,0x00,		
	0x51,0xc0/*0xc2*/,
	0x52,0x00,

	0x1d,/*0x10*/0x00,

	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////

	//begin a section////////////////////////////////
	0x01,	0x00,

	0x00,0x01,
	0x14,0x65/*0xe5*/,

	0x0C, /*0x08*/0x0C,
	0x0D, /*0x08*/0x0C,
	0x0E, 0x08,
	0x0F, 0x08,

	0x16, 0x74, 0x17, 0x74,//mute IN1->HP
	0x18, 0x28, 0x19, 0x28,//mute MAL/MAR

	0x00,0x00,		

	//# Power up the Left and Right DAC Channels with route the Left Audio digital data to
	//# Left Channel DAC and Right Audio digital data to Right Channel DAC
	0x3f,0x94,
	0x3f,0xd4,

	//# Unmute the DAC digital volume control
	0x40,0x08,
	0x40,0x00,

	//0x1d,0x00,
	//0x1d,0x10,

	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////

	//begin a section////////////////////////////////
	0x01,	0x00,

	0x00,0x01,
	0x09,0x20,
	0x09,0x30,
	0x09,0x38,
	0x09,0x3C,	

	0x11,0x00/*0x40*/,
	0x10,0x00/*0x40*/,

	0x12,0x00/*0x40*/,
	0x13,0x00/*0x40*/,

	//Mic Bias enabled, Source = Avdd, 
	//MICBIAS = 1.425V(CM = 0.75V) or MICBIAS = 1.7V(CM = 0.9V)
	0x33,0x50,

 	//MICPGA Volume +0db
	0x3b,0x0,
	0x3c,0x0,

	//digital volume:
	0x00, 0x00,		
	0x41, 0x00,
	0x42, 0x00,

// ADC volume:
// 	0x53,0x68,
// 	0x54,0x68,

	//adaptive filter
	0x00,0x08,
	0x01,0x04,		

	0x00,0x2C,
	0x01,0x04,			

	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////

};

static const BYTE cmd_Adaptive_filter_ini_n4p5db[]={
	//begin a section////////////////////////////////
	0x1,	0x02,//delay 2*10ms
	0x00,0x00,		
	0x01,0x01,  
	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////

	//begin a section////////////////////////////////
	0x1,	0x05,//delay 5*10ms

	0x00,0x00,

	//High PLL Clock Range
	0x04,0x03/*0x43*/,

#if (CVTE_DEF_AUDIO_CODEC_SAMPLERATE_44100 == 1)
	//For 44.1K: //5.6448
	//MCLK = 16M, PLLP=1,PLLR=1,PLLJ=5, PLLD=6448
	//MADC=2,NADC=2,AOSR=512,
	//MDAC=2,NDAC=2,DOSR=128
	0x05,0x91,//PLL-P
	0x06,0x05,//PLL-J
	0x07,0x19,//PLL-D-high
	0x08,0x30,//PLL-D-low
#else
	//For 48K:
	//MCLK = 16M, PLLP=1,PLLR=1,PLLJ=6, PLLD=1440
	//MADC=2,NADC=2,AOSR=512,
	//MDAC=2,NDAC=2,DOSR=128
	0x05,0x91,//PLL-P
	0x06,0x06,//PLL-J
	0x07,0x05,//PLL-D-high
	0x08,/*0xA0*/0xA3,//PLL-D-low
#endif

	//NDAC=2
	0x0B,0x01,
	0x0B,0x82,
	//MDAC=2
	0x0C,0x04,
	0x0C,0x82,
	//DOSR=512
	0x0D,0x02,
	0x0E,0x00,
	//NADC=2
	0x12,0x01,
	0x12,0x82,
	//MADC=8
	0x13,0x04,
	0x13,0x88,
	//AOSR=128
	0x14,0x80,

	//BCLK,MCLK output,word length 32bit
	0x1b,0x3c/*0x0c*/,
	//BCLK N Divider=16//32//
	0x1e,/*0xa0*/0x90,
	//0x1d,0x84,
	//data offset:0
	0x1c,0x00,

	// 	0x3D,0x01,
	// 	0x3C, 0x08,
	0x3D,/*0x00*/0x02,
	0x3C,/*0x19*/0x19,

	//power on ADC
	0x24,/*0xCC*/0x88,
	//power on DAC
	0x25,0x88,

	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////

	//begin a section////////////////////////////////
	0x01,	0x00,

	0x00,0x01,	
	// 	0x01,0x08,
	// 	0x02,0x00,

	0x02,0xA9/*0x09*/,
	0x01,0x08,	
	0x02,0xA1/*0x01*/,

	0x0A,0x00/*0x03*/,

	0x3D,0x00, //PTM_R1
	0x47,0x32,	
	0x7B,0x01,	
	0x34,/*0x10*/0x00,
	0x36,0x40,
	0x37,/*0x10*/0x00,
	0x39,0x40,
	0x3A,0x00,

	0x3b,0x00,
	0x3c,0x00,

	0x00,0x00,		
	0x51,0xc0/*0xc2*/,
	0x52,0x00,

	0x1d,/*0x10*/0x00,

	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////

	//begin a section////////////////////////////////
	0x01,	0x00,

	0x00,0x01,
	0x14,0x65/*0xe5*/,

	0x0C, /*0x08*/0x0C,
	0x0D, /*0x08*/0x0C,
	0x0E, 0x08,
	0x0F, 0x08,

	0x16, 0x74, 0x17, 0x74,//mute IN1->HP
	0x18, 0x28, 0x19, 0x28,//mute MAL/MAR

	0x00,0x00,		

	//# Power up the Left and Right DAC Channels with route the Left Audio digital data to
	//# Left Channel DAC and Right Audio digital data to Right Channel DAC
	0x3f,0x94,
	0x3f,0xd4,

	//# Unmute the DAC digital volume control
	0x40,0x08,
	0x40,0x00,

	//0x1d,0x00,
	//0x1d,0x10,

	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////

	//begin a section////////////////////////////////
	0x01,	0x00,

	0x00,0x01,
	0x09,0x20,
	0x09,0x30,
	0x09,0x38,
	0x09,0x3C,	

	0x11,0x00/*0x40*/,
	0x10,0x00/*0x40*/,

	0x12,0x00/*0x40*/,
	0x13,0x00/*0x40*/,

	//Mic Bias enabled, Source = Avdd, 
	//MICBIAS = 1.425V(CM = 0.75V) or MICBIAS = 1.7V(CM = 0.9V)
	0x33,0x50,

 	//MICPGA Volume +0db
	0x3b,0x0,
	0x3c,0x0,

	//digital volume:
	0x00, 0x00,		
// 	0x41, 0xF7,	//-9, -4.5db
// 	0x42, 0xF7,	//-9, -4.5db
	0x41, 0xF8,	//-8, -4.0db
	0x42, 0xF8,	//-8, -4.0db

// ADC volume:
// 	0x53,0x68,
// 	0x54,0x68,

	//adaptive filter
	0x00,0x08,
	0x01,0x04,		

	0x00,0x2C,
	0x01,0x04,			

	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////

};

static const BYTE cmd_Adaptive_filter_ini0[]={
	//begin a section////////////////////////////////
	0x1,		0x10,
	0x00,0x00,		
	0x01,0x01,  
	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////

	//begin a section////////////////////////////////
	0x01,	0x00,
	0x00,0x00,
	0x04,0x03,
	0x05,0x91,
	0x06,0x08,

	0x0B,0x82,
	0x0C,0x88,
	0x0E,0x80,
	0x12,0x82,
	0x13,0x88,

	0x14, 0x80,
	0x3D, 0x02,
	0x3C, 0x19,
	0x24,0xCC,

	0x00,0x01, 

	0x02,0xA9,
	0x01,0x08, 
	0x02,0xA1,

	0x0A,0x00,

	0x3D,0x00,
	0x47,0x32, 
	0x7B,0x01, 
	0x34,0x10,
	0x36,0xC0,
	0x37,0x10,
	0x39,0xC0,
	0x3A,0x00,

	0x3b,0x00,
	0x3c,0x00,

	0x00,0x00,       
	0x51,0xc0,
	0x52,0x00,
	0x1d,0x10,

	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////

	//begin a section////////////////////////////////
	0x01,	0x00,
	0x00,0x01,
	0x0C, 0x08,
	0x0D, 0x08,
	0x0E, 0x08,
	0x0F, 0x08,

	0x16, 0x74, 0x17, 0x74,//mute IN1->HP
	0x18, 0x28, 0x19, 0x28,//mute MAL/MAR

	0x00,0x00,       
	0x3f,0x94,
	0x3f,0xd4,
	0x40,0x08,
	0x40,0x00,

	0x1d,0x00,
	0x1d,0x10,

	0x00,0x01,
	0x09,0x20,
	0x09,0x30,

	0x09,0x3C,      

	0x11,0x00,
	0x10,0x00,

	0x12,0x00,
	0x13,0x00,

	0x41, 0x00,
	0x42, 0x00,

	0x00,0x08,
	0x01,0x04,		

	0x00,0x2C,
	0x01,0x04,      

	0xAA,0xAA,0xAA,0xAA,
	//end a section////////////////////////////////
};



